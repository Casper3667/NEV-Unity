#define TETHERPLANMULT 3500 //How much power is generated per segment of a tether while in orbit
#define TETHERSOLMUTLT 500

/obj/machinery/power/cathode
	name = "power system interface"
	desc = "this device converts current generated by an electromagnetic tether into usable electricity."
	icon = 'icons/obj/power.dmi'
	icon_state = "psi"
	anchored = 1
	density = 1
	directwired = 1
	use_power = 0
	idle_power_usage = 0
	active_power_usage = 0
	var/panel = 0 // 0 is closed, 1 is open
	var/deployed = 0 // 0 is not deployed, 1 is deployed
	var/health = 10
	var/cableamount = 5 // how many lengths of cable are in the device
	var/cablequality = 1 //up to 3
	var/obj/structure/tether/child = null

/obj/machinery/power/cathode/New(var/turf/loc, var/process = 1)
	..(loc)
	connect_to_network(process)

/obj/machinery/power/cathode/proc/deploy()
	src.deployed = 1
	if(cableamount > 0)
		child = new /obj/structure/tether(src.loc)
		child.quality = cablequality
		step(child,src.dir,15)
		child.dir = src.dir
		sleep(5)
		child.extend(cableamount, cablequality)
		cableamount = 0
		return 1
	else
		return 0
/obj/machinery/power/cathode/verb/deploycable()
	set name = "Manual Deploy"
	set category = "Object"
	set src in view(1)
	if(!deployed)
		src.deploy()

/obj/machinery/power/cathode/proc/retract()
	src.deployed = 0
	cableamount = child.retract()
	sleep(5)
	del(child)
	return

/obj/machinery/power/cathode/verb/retractcable()
	set name = "Manual Retract"
	set category = "Object"
	set src in view(1)
	if(deployed)
		src.retract()

/obj/machinery/power/cathode/attackby(obj/item/W, mob/user)
	//Crowbars open and close the maint panel
	if(iswrench(W))
		if(deployed)
			usr << "\red You can\'t reach the bolts while the unit is deployed!"
			return
		playsound(src.loc, 'sound/items/Ratchet.ogg', 75, 1)
		src.anchored = !src.anchored
		user.visible_message("[user.name] [anchored? "secures":"unsecures"] the [src.name].", \
			"You [anchored? "secure":"undo"] the external bolts.", \
			"You hear a ratchet")
		if(anchored)
			connect_to_network()
		else
			disconnect_from_network()
		return
	if(!anchored)
		usr << "\red The interface is not anchored down!"
		return
	if(iscrowbar(W))
		panel = !panel //if we are closed, open, if we are open, close
		if(panel)//if the panel is open after that
			usr << "\blue You open the maintainence panel."
		else
			usr << "\blue You close the maintainence panel."
		return
	user << panel
	if(!panel) return //if the panel is not open, stop

	if(istype(W, /obj/item/weapon/wirecutters)) //If we use wirecutters
		if(deployed)
			playsound(usr.loc, 'sound/items/Wirecutter.ogg', 100, 1)
			usr << "\red You cut the deployed cable."
			src.detach_cable()
		if(cableamount == 0)
			usr << "\red Nothing to cut!"
			return
		else
			usr << "\blue You detach the cable"
			var/obj/item/stack/tether_cable/cablespawn
			if(cablequality == 1)
				cablespawn = new /obj/item/stack/tether_cable/metal(usr.loc)
			if(cablequality == 2)
				cablespawn = new /obj/item/stack/tether_cable/silver(usr.loc)
			if(cablequality == 3)
				cablespawn = new /obj/item/stack/tether_cable/gold(usr.loc)
			cablespawn.amount = cableamount
		playsound(usr.loc, 'sound/items/Wirecutter.ogg', 100, 1)
		cableamount = 0
		cablequality = 0
		return

	if(istype(W, /obj/item/stack/tether_cable))
		var/obj/item/stack/tether_cable/T = W
		if(deployed)
			usr << "\red Remote the existing cable first!"
			return
		if(cableamount > 0)
			usr << "\red Remove the existing cable first!"
		else
			usr << "\blue You wind the new cable into the interface"
			cableamount = T.amount
			cablequality = T.quality
			del(T)
		return
	..()
/obj/machinery/power/cathode/proc/detach_cable()
	child.broken()
	deployed = 0
	return
/obj/machinery/power/cathode/blob_act()
	src.health--
	src.healthcheck()
	return


/obj/machinery/power/cathode/proc/healthcheck()
	if (src.health <= 0)
		if(!(stat & BROKEN))
			broken()
		else
			new /obj/item/weapon/shard(src.loc)
			new /obj/item/weapon/shard(src.loc)
			del(src)
			return
	return

/obj/machinery/power/cathode/update_icon()
	..()
	if(stat & BROKEN)
//		icon = test //ADD BROKEN ICON HERE
	else
//		icon = test //ADD WORKING ICON HERE
//	return
/obj/machinery/power/cathode/process()
	if(stat & BROKEN)	return
	if(!deployed) return
	if(child)
		add_avail(src.child.getpower())


/obj/machinery/power/cathode/proc/broken()
	stat |= BROKEN
	update_icon()
	return


/obj/machinery/power/cathode/meteorhit()
	if(stat & !BROKEN)
		broken()
	else
		del(src)


/obj/machinery/power/cathode/ex_act(severity)
	switch(severity)
		if(1.0)
			del(src)
			if(prob(15))
				new /obj/item/weapon/shard( src.loc )
			return
		if(2.0)
			if (prob(25))
				new /obj/item/weapon/shard( src.loc )
				del(src)
				return
			if (prob(50))
				broken()
		if(3.0)
			if (prob(25))
				broken()
	return


/obj/machinery/power/cathode/blob_act()
	if(prob(75))
		broken()

//EMAG CABLING

/obj/item/stack/tether_cable
	name = "electromagnetic tether cable"
	desc = "Specialized superconductive cable for electromagnetic tethers."
	singular_name = "tether"
	icon = 'icons/obj/power.dmi'
	icon_state = "tether_coil"
	flags = FPRINT | TABLEPASS| CONDUCT
	w_class = 3.0
	force = 5.0
	throwforce = 5.0
	throw_speed = 5
	throw_range = 20
	matter = list("metal" = 2000)
	max_amount = 10
	attack_verb = list("whips", "slaps", "diciplines")
	origin_tech = "materials=1"
 //This determines what percentage of collected power is transmitted from one segment of cable to the next
	var/quality = 1
/obj/item/stack/tether_cable/metal
	quality = 1
	matter = list("metal" = 2000)
/obj/item/stack/tether_cable/silver
	desc = "Specialized superconductive cable for electromagnetic tethers. It has a silver core"
	quality = 2
	matter = list("silver" = 2000)
	origin_tech = "materials=3"
/obj/item/stack/tether_cable/gold
	desc = "Specialized superconductive cable for electromagnetic tethers. It has a gold core"
	quality = 3
	matter = list("gold" = 2000)
	origin_tech = "materials=4"
//TETHER STRUCTURE
/obj/structure/tether
	name = "Tether"
	desc = "A heavy superconductive cable used by eletromagnetic tethers."
	icon = 'icons/obj/power.dmi'
	icon_state = "tether"
	var/quality = 1
	var/obj/structure/tether/child = null

/obj/structure/tether/proc/getpower()
	var/outputPower = 0
	var/effeciency
	switch(quality)
		if(1)
			effeciency = 0.8
		if(2)
			effeciency = 0.9
		if(3)
			effeciency = 0.95
		else
			effeciency = 0.8 //This should never happen
	if(child) //If we have a segment past this one, transfer over the power it contains and multiply by transfer coeffecient
		outputPower = child.getpower() * effeciency
	//Determine power this segment generates
	var/orbitOutput = 0
	if(ship.curplanet) //if we are in orbit
		orbitOutput = ship.curplanet.rads * TETHERPLANMULT
	orbitOutput = orbitOutput + ship.cursystem.rads * TETHERSOLMUTLT
	if(istype(src.loc,/turf/space)) //if we are in space...
		outputPower = outputPower + orbitOutput
	//Add them together
	return outputPower

/obj/structure/tether/proc/extend(var/cableamount, var/cablequality)
	cableamount--
	if(cableamount > 0)
		src.child = new /obj/structure/tether(src.loc)
		src.child.quality = cablequality
		step(child,src.dir,15)
		child.dir = src.dir
		sleep(5)
		child.extend(cableamount, cablequality)
		return
	else
		return
/obj/structure/tether/proc/retract()
	var/cableamount = 0
	if(child)
		cableamount = child.retract()
	cableamount++
	del(child)
	sleep(5)
	return  cableamount

/obj/structure/tether/proc/broken()
//If something breaks the teather, it breaks all child objects of the tether, then spawns cable in on the object, then deletes the object.
	if(child)
		child.broken()
	sleep(5)
	switch(quality)
		if(1) new /obj/item/stack/tether_cable/metal(src.loc)
		if(2) new /obj/item/stack/tether_cable/silver(src.loc)
		if(3) new /obj/item/stack/tether_cable/gold(src.loc)
	del(src)

